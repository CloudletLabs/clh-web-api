#%RAML 0.8
---
title: clh-web-api
baseUri: http://{apiHostname}:{apiPort}/api/v{version}
baseUriParameters:
  apiHostname:
    description: Server hostname
    enum: [ "localhost", "clh-web-api-dev.herokuapp.com" ]
  apiPort:
    description: Server port
    enum: [ 8087 ]
version: 1
mediaType: application/json
protocols: [ HTTPS ]
documentation:
  - title: CloudletHub API
    content: |
      This is the main CloudletHub API.
  - title: Auth
    content: |
      Auth in this API is very simple atm.

      In short, you have to give a POST call to /auth_token with username/password JSON and save the token.

      Then you use this token whenever you need auth.

      Tokens expire so you have a PUT call to the same endpoint to rotate.

      You can have one token simulatenously per user-agent.

      The aim is to following the Bearer OAuth RFC#6750: http://www.rfc-base.org/txt/rfc-6750.txt but we are far away from it.

schemas:
  - info: !include schemas/info.json
  - authToken: !include schemas/authToken.json
  - user: !include schemas/user.json
  - users: !include schemas/users.json
  - usernameAndPass: !include schemas/usernameAndPass.json
  - userForPost: !include schemas/userForPost.json
  - userForPut: !include schemas/userForPut.json
  - news: !include schemas/news.json
  - newss: !include schemas/newss.json
  - newsForPostOrPut: !include schemas/newsForPostOrPut.json

securitySchemes:
  - User-Password:
      type: x-json-user-password
      description: |
        Auth by sending username and password in json
  - Bearer:
      type: x-bearer
      description: |
        Auth by sending Bearer Auth token as header
      describedBy:
        headers:
          Authorization:
            displayName: Bearer Auth token (OAuth 2.0)
            description: Value should be "Bearer `token`"
            pattern: ^Bearer\s\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$
            required: true
            minLength: 43
            maxLength: 43
            example: Bearer 75756a80-8d78-11e6-8ffa-31f5c3ff9641
        responses:
          401:
            description: |
              Bad or expired token. This can happen if the user has
              revoked or expired an access token. To fix, you should re-
              authenticate the user.

/status:
  displayName: Status
  get:
    description: Get service status
    responses:
      200:
        body:
          text/html:
            example: |
              ok
/info:
  displayName: Info
  get:
    description: Get service info
    responses:
      200:
        body:
          application/json:
            schema: info
            example: !include bodies/responses/info.json
/auth_token:
  displayName: Auth
  post:
    description: Get auth token for username+password pair
    securedBy: [ User-Password ]
    body:
      application/json:
        schema: usernameAndPass
        example: !include bodies/requests/usernameAndPass.json
    responses:
      200:
        body:
          application/json:
            schema: authToken
            example: !include bodies/responses/auth_token.json
/user:
  displayName: Current User
  get:
    description: Get user for this token
    securedBy: [ Bearer ]
    responses:
      200:
        body:
          application/json:
            schema: user
            example: !include bodies/responses/admin.json
/users:
  displayName: Users
  get:
    description: Get users
    securedBy: [ Bearer ]
    responses:
      200:
        body:
          application/json:
            schema: users
            example: !include bodies/responses/users.json
  post:
    description: Create new user
    body:
      application/json:
        schema: userForPost
        example: !include bodies/requests/userForPost.json
    responses:
      200:
        body:
          application/json:
            schema: user
            example: !include bodies/responses/userFromPost.json
      400:
        description: User with this username already exists
  /{username}:
    uriParameters:
      username:
        displayName: Username
        description: Uniq user ID
        type: string
    get:
      description: Get user
      securedBy: [ Bearer ]
      responses:
        200:
          body:
            application/json:
              schema: user
              example: !include bodies/responses/user.json
        404:
          description: User not found
    put:
      description: Update user
      securedBy: [ Bearer ]
      body:
        application/json:
          schema: userForPut
          example: !include bodies/requests/userForPut.json
      responses:
        200:
          body:
            application/json:
              schema: user
              example: !include bodies/responses/user.json
        404:
          description: User not found
    delete:
      description: Delete user
      securedBy: [ Bearer ]
      responses:
        200:
          body:
            application/json:
              example: |
                { }
/news:
  displayName: News
  get:
    description: Get news
    responses:
      200:
        body:
          application/json:
            schema: newss
            example: !include bodies/responses/newss.json
  post:
    description: Create new news
    securedBy: [ Bearer ]
    body:
      application/json:
        schema: newsForPostOrPut
        example: !include bodies/requests/newsForPostOrPut.json
    responses:
      200:
        body:
          application/json:
            schema: news
            example: !include bodies/responses/news.json
      400:
        description: News with this slug already exists
  /{slug}:
    uriParameters:
      slug:
        displayName: Semantic URL
        description: URL that identifies a page in human-readable keywords
        type: string
    get:
      description: Get news by slug
      responses:
        200:
          body:
            application/json:
              schema: news
              example: !include bodies/responses/news.json
    put:
      description: Update news
      securedBy: [ Bearer ]
      body:
        application/json:
          schema: newsForPostOrPut
          example: !include bodies/requests/newsForPostOrPut.json
      responses:
        200:
          body:
            application/json:
              schema: news
              example: !include bodies/responses/news.json
        400:
          description: News with this slug already exists
    delete:
      description: Delete news
      securedBy: [ Bearer ]
      responses:
        200:
          body:
            application/json:
              example: |
                { }